{"version":3,"sources":["InitialText/InitialText.module.css","List/List.module.css","Header/Header.js","InitialText/InitialText.js","formDatas/formDatas.js","ResultData/ResultData.js","ResultText/ResultText.js","InputComp/InputComp.js","List/List.js","Button/Button.js","Footer/Footer.js","App/App.js","serviceWorker.js","index.js","InputComp/InputComp.module.css"],"names":["module","exports","Header","InitialText","className","styles","question","answerType","answers","userAnswer","this","initialQ","mediumQ","endQ","qestionArray","concat","StyleSheet","create","page","flexDirection","backgroundColor","section","margin","padding","flexGrow","MyDoc","size","style","ResultText","document","fileName","blob","url","loading","error","InputComp","state","index","pageNumber","useState","inputData","setInput","true","warning","setWarning","changeValueRange","e","target","value","useEffect","checkAnswer","questionArray","undefined","triggerAnswer","false","targetElement","getElementById","checked","push","finding","findIndex","el","splice","answerChecked","answer","ans","map","userAns","key","InputAnswer","onClick","changeValue","name","type","onChange","min","max","id","disabled","List","console","log","currentValue","elementsOnPage","length","generatingList","Button","descr","count","Footer","App","setCount","setPage","setState","setPageNumber","ref","useRef","buttonAction","actualState","answersNumber","width","current","offsetWidth","pageNum","Math","ceil","floor","text","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,YAAc,mC,oBCAhCD,EAAOC,QAAU,CAAC,KAAO,qB,uWCcVC,MAZf,WACI,OACI,gCACA,sD,kBCcOC,MAjBf,WAEI,OACI,yBAAKC,UAAWC,IAAOF,aACnB,gDAGA,gX,0BCDGG,EARX,WAAYA,EAAUC,EAAYC,EAASC,GAAa,oBACpDC,KAAKJ,SAAWA,EAChBI,KAAKH,WAAaA,EAClBG,KAAKF,QAAUA,EACfE,KAAKD,WAAaA,GCJpBE,EAAW,CACb,IAAIL,EAAS,gBAAiB,QAAS,CAAC,KACxC,IAAIA,EAAS,wBAAyB,QAAS,CAAC,KAChD,IAAIA,EAAS,oCAA2B,QAAS,CAAC,mBAAoB,sBAAkB,UAAW,UAAW,oCAC9G,IAAIA,EAAS,qCAAsC,QAAS,CAAC,QAAS,QAAS,QAAS,QAAS,4BACjG,IAAIA,EAAS,2DAAwC,WAAY,CAAC,YAAU,YAAU,aAAS,SAAU,sBAAa,QAAS,KAE7HM,EAAU,CACZ,IAAIN,EAAS,0DAAsD,QAAS,CAAC,WAAY,YAAa,cAAY,cAClH,IAAIA,EAAS,6CAA+B,WAAY,CAAC,QAAS,SAAU,QAAQ,IACpF,IAAIA,EAAS,yCAAqC,WAAY,CAAC,MAAO,WAAY,YAAa,gBAAY,eAAgB,aAAc,YAAa,QAAS,IAC/J,IAAIA,EAAS,6CAA+B,QAAS,CAAC,iBAAkB,sBAAuB,oBAAqB,eACpH,IAAIA,EAAS,yCAAqC,QAAS,CAAC,MAAO,qCAAuB,iBAAkB,mBAI1GO,EAAO,CACT,IAAIP,EAAS,+DAAiD,WAAY,CAAC,SAAU,0BAAiB,WAAY,YAAQ,8BAAgB,WAAW,kBAAkB,IACvK,IAAIA,EAAS,uCAAwC,QAAS,CAAC,yCAA2B,iCAAmB,wBAC7G,IAAIA,EAAS,iDAAmC,QAAS,CAAC,MAAO,MAAO,mBACxE,IAAIA,EAAS,mEAAkD,WAAY,CAAC,cAAe,iBAAkB,SAAU,oBAAW,gBAAiB,aAAa,IAChK,IAAIA,EAAS,uCAAwC,QAAS,CAAC,4BAA6B,SAAU,YAAa,SAGnHQ,EAAe,GAEJA,EADfA,EAAeA,EAAaC,OAAOJ,EAAUC,EAASC,GCpBhDR,EAASW,IAAWC,OAAO,CAC7BC,KAAM,CACJC,cAAe,MACfC,gBAAiB,WAEnBC,QAAS,CACPC,OAAQ,GACRC,QAAS,GACTC,SAAU,KAIVC,EAAQ,kBACV,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAMC,KAAK,KAAKC,MAAOtB,EAAOa,MAC5B,kBAAC,IAAD,CAAMS,MAAOtB,EAAOgB,SAClB,kBAAC,IAAD,oBAEF,kBAAC,IAAD,CAAMM,MAAOtB,EAAOgB,SAClB,kBAAC,IAAD,uBAcOO,MARf,WACG,OAAQ,6BACL,kBAAC,IAAD,CAAiBC,SAAU,kBAAC,EAAD,MAAWC,SAAS,iBAC5C,cAAGC,KAAH,EAASC,IAAT,IAAcC,EAAd,EAAcA,QAAd,EAAuBC,MAAvB,OAAoCD,EAAU,sBAAwB,qB,mCC0HhEE,MAzJf,YAAgF,IAA1DC,EAAyD,EAAzDA,MAAO9B,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,QAAS6B,EAAmB,EAAnBA,MAAmB,KAAZC,WAEnCC,mBAAS,CAAC,aAFqC,mBAEtEC,EAFsE,KAE3DC,EAF2D,OAGhDF,mBAASlC,IAAOqC,MAHgC,mBAGtEC,EAHsE,KAG7DC,EAH6D,KAqBzEC,EAAkB,SAACC,GACvBL,EAASK,EAAEC,OAAOC,OAClBJ,EAAWvC,IAAOqC,OAGnBO,qBAAU,WACR,IAAMC,EAAcC,EAAcd,GAAO5B,gBAExB2C,GAAfF,GACe,IAAfA,GACS,GAATd,GAA+B,WAAbI,GAKrBI,EAAWvC,IAAOqC,MAElBW,KALFT,EAAWvC,IAAOiD,UAWlB,IAAMD,EAAc,WAClB,GAAgB,WAAbb,EAAuB,CACxB,IAAMe,EAAgB1B,SAAS2B,eAAehB,GAClD,GAAkB,aAAfjC,GACC,GAA4B,GAAzBgD,EAAcE,QACfN,EAAcd,GAAO5B,WAAWiD,KAAKlB,QAEtC,GAA4B,GAAzBe,EAAcE,QAAiB,CACrC,IAAIE,EAAUR,EAAcd,GAAO5B,WAAWmD,WAAU,SAAAC,GACtD,OAAOA,IAAOrB,KAEVW,EAAcd,GAAO5B,WAAWqD,OAAOH,EAAQ,GAC/ClB,EAAS,gBAGM,UAAflC,EAEmB,GAAzBgD,EAAcE,QAAiBN,EAAcd,GAAO5B,WAAa+B,GAE/DW,EAAcd,GAAO5B,gBAAa2C,EAClCX,EAAS,YAITU,EAAcd,GAAO5B,WAAa+B,IAMhCuB,EAAc,SAACC,GACnB,GAAiB,WAAbxB,EAAuB,CAE3B,GAAiB,SAAdjC,GACAyD,GAAUb,EAAcd,GAAO5B,WAEhC,OAAO,EAGL,IAAIwD,EADR,GAAiB,YAAd1D,EAWC,OAPA4C,EAAcd,GAAO5B,WAAWyD,KAAI,SAACC,GAGhCH,GAAUG,IACXF,GAAM,MAGHA,IAaT,OACI,yBAAK7D,UAAWC,IAAO8B,WACrB,0BAAMiC,IAAM/B,EAAM/B,EAAUF,UAAYE,GAC1C,2BAAOF,UAAWuC,GAAUrC,GACrBE,EAAQ0D,KAAK,SAACF,GAAD,OACZ,yBAAM5D,UAAWC,IAAOgE,YAAaD,IAAK/B,EAAO9B,EAAYyD,EAC7DM,QAAS,kBA3GJ,SAACN,GACtB,GAAiB,SAAdzD,EAAsB,CAEpB,IAAMgD,EAAgB1B,SAAS2B,eAAeQ,GACjB,GAAzBT,EAAcE,SACjBF,EAAcE,SAAU,EACvBb,EAAWvC,IAAOqC,OAEa,GAAzBa,EAAcE,UACrBF,EAAcE,SAAU,EACxBb,EAAWvC,IAAOiD,QAElBb,EAASuB,IA+FcO,CAAYP,KAEzB,6BAIiB,UAAdzD,EAEO,6BAAK,2BAAOiE,KAAMlE,EAC1BmE,KAAMlE,EACN6D,IAAKJ,EACThB,MAzBM,WAAbR,EACMW,EAAcd,GAAO5B,WAGrB+B,EAsBKkC,SAAU7B,EACV8B,IAAI,IAAIC,IAAI,OAEA,WAAXpC,EAAsBA,EAAWW,EAAcd,GAAO5B,YAK/C,2BAAQ+D,KAAMlE,EACxBmE,KAAMlE,EACNsE,GAAIb,EACJI,IAAKJ,EACLhB,MAAOgB,EACPP,QAAUM,EAAcC,GACxBc,UAAQ,KAMR,+BAASd,UCzGVe,MArCf,YAA0C,IAA3B7D,EAA0B,EAA1BA,KAAMkB,EAAoB,EAApBA,MAAOE,EAAa,EAAbA,WAexB,OAdA0C,QAAQC,IAAI3C,EAAapB,GAerB,yBAAKd,UAAWuB,IAAMoD,KAAMX,IAAM,OAASlD,GAGnCiC,EAAce,KAAI,SAACgB,EAAc7C,GAAf,OAhBP,SAACS,GACpB,IAAMqC,EAAiBhC,EAAciC,OAAO9C,EAEpD,OADO0C,QAAQC,IAAIE,GAChBrC,EAAEqC,EAAejE,GAAQ4B,GAAIqC,GAAgBjE,EAAK,GAaMmE,CAAehD,GAAQ,kBAAC,EAAD,CAClED,MAASA,EACTgC,IAAK/B,EACL/B,SAAU4E,EAAa5E,SACvBC,WAAY2E,EAAa3E,WACzBC,QAAS0E,EAAa1E,QACtB6B,MAAOA,EACPC,WAAYpB,IAEX,U,OCGFoE,MAhCf,YAII,IAAD,IAHCC,aAGD,MAHS,QAGT,OAFCC,MAED,EADCpD,cACD,WAE4BG,mBAAS,GAFrC,mBAsBC,OAtBD,UAuBK,4BAAQnC,UAAS,UAAKgC,IAAWmD,I,OChB1BE,MAZf,WACI,OACI,gCACA,qDC8IOC,MA1If,WAAgB,IAAD,EAEKnD,mBAAS,GAFd,mBACJiD,EADI,KAEPG,EAFO,OAIIpD,mBAAS,WAJb,mBAGJrB,EAHI,KAIP0E,EAJO,OAMKrD,oBAAS,GANd,mBAKJH,EALI,KAMPyD,EANO,OAQctD,mBAAS,GARvB,mBAOAD,EAPA,KAQHwD,EARG,KAURC,EAAMC,iBAAO,MA2BhB,SAASC,EAAaxB,GAClB,IAAIyB,GAAc,EACdC,EAAgB,EACdhB,EAAiBhC,EAAciC,OAAO9C,EAC5C0C,QAAQC,IAAI/D,EAAOsE,GACP,QAARtE,GACA8D,QAAQC,IAAI,QAAUiB,GACtB/C,EAAce,KAAI,SAAC5D,EAAU+B,GAErBA,EAAQ8C,EAAiBK,SAAiCpC,GAAvB9C,EAASG,YAAkD,IAAvBH,EAASG,aAEhFoF,EADAK,GAAc,GAEdlB,QAAQC,IAAI,OAAS5C,EAAQmD,IACtBnD,EAAQ8C,EAAiBK,QAAiCpC,GAAvB9C,EAASG,YAAkD,IAAvBH,EAASG,YACvF0F,OAIJA,GAAiBhB,EAAiBK,GAElCK,EADAK,GAAc,GAGC,GAAfA,GAA+B,QAARzB,GACvBO,QAAQC,IAAIiB,GACZP,EAASH,EAAQ,IACF,QAARf,IACPkB,EAASH,EAAQ,GAEjBK,EADAK,GAAc,IAGlBlB,QAAQC,IAAI,QAAUiB,IAEV,QAARzB,GACAkB,EAASH,EAAQ,GAO7B,OAhEAvC,qBAAU,WACN,IAAMmD,EAAQL,EAAIM,QAAUN,EAAIM,QAAQC,YAAc,EACtDtB,QAAQC,IAAI,QAASmB,GAC7B,IACIG,EADEpB,EAAiBqB,KAAKC,KAAKL,EAAM,KAAK,EAGtB,IAAVZ,GACAI,EAAQ,WACRW,EAAUC,KAAKE,MAAMvD,EAAciC,OAAOD,GAC1CW,EAAcS,GAEdvB,QAAQC,IAAI3C,IACLkD,GAAS,GAAKA,GAASlD,EAC9BsD,EAAQ,QACDJ,IAAUlD,EAAW,EAC5BsD,EAAQ,UACDJ,EAAQlD,EAAW,IAC1BqD,EAAS,GACTC,EAAQ,SAEZZ,QAAQC,IAAI3C,KACb,CAACkD,EAAOO,EAAIM,UA4CX,yBAAKjG,UAAU,MAAM2F,IAAKA,GAEtB,kBAAC,EAAD,MACA,0BAAMlB,GAAG,WACT,yBAAKA,GAAG,QACF,WACE,OAAQ3D,GACJ,IAAK,UACD,OAAO,yBAAKkD,IAAKlD,EAAM2D,GAAI3D,GAAM,kBAAC,EAAD,MAC7B,yBACIoD,QAAS,WACT2B,EAAa,UAEb,kBAAC,EAAD,CAAQjD,MAAOwC,EAAOmB,KAAO,YAGzC,IAAK,OACD,OAAO,yBAAKvC,IAAKlD,EAAM2D,GAAI3D,GAEvB,kBAAC,EAAD,CAAMA,KAAOsE,EAAOpD,MAAOA,EAAOE,WAAYA,IAC9C,6BACI,yBACIgC,QAAS,WACT2B,EAAa,UAEb,kBAAC,EAAD,CAAQjD,MAAOwC,EAAOD,MAAQ,kBAElC,yBACIjB,QAAS,WACT2B,EAAa,UAEb,kBAAC,EAAD,CAAQjD,MAAOwC,EAAOD,MAAQ,QAASC,MAAOA,EAAOpD,MAAOA,OAG5E,IAAK,SACD,OAAO,yBAAKgC,IAAKlD,EAAM2D,GAAI3D,GAAM,kBAAC,EAAD,MAC7B,yBACIoD,QAAS,WACT2B,EAAa,UAEb,kBAAC,EAAD,CAAQjD,MAAOwC,EAAOD,MAAQ,iBAG1C,QACI,OAAO,yBAAKnB,IAAI,UAAUS,GAAG,WAAU,kBAAC,EAAD,MACnC,yBACIP,QAAS,WACT2B,EAAa,UAEb,kBAAC,EAAD,CAAQjD,MAAOwC,EAAOD,MAAQ,aA5ChD,IAiDN,0BAAMV,GAAG,UACT,kBAAC,EAAD,SCnIQ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrF,SAAS2B,eAAe,SD2H3C,kBAAmB2D,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBElInBxH,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,KAAO,wBAAwB,UAAY,6BAA6B,YAAc,+BAA+B,YAAc,kC","file":"static/js/main.9f1a3994.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"InitialText\":\"InitialText_InitialText__2SnDw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"List_List__38b6F\"};","import React from 'react'\r\nimport './Header.css';\r\n\r\nfunction Header(){\r\n    return (\r\n        <header>\r\n        <h1>\r\n        Generator treningowy\r\n        </h1>\r\n\r\n        </header>\r\n    \r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport styles from './InitialText.module.css';\r\n\r\nfunction InitialText() {\r\n\r\n    return (\r\n        <div className={styles.InitialText}>\r\n            <h2>\r\n                Cześć!\r\n            </h2>\r\n            <p>kjafngslkearn ooiragflakloigm oirmjgl moir irmglm oiamligm imalgimia imalirg ialigm\r\n            kjafngslkearn ooiragflakloigm oirmjgl moir irmglm oiamligm imalgimia imalirg ialigm\r\n            kjafngslkearn ooiragflakloigm oirmjgl moir irmglm oiamligm imalgimia imalirg ialigm\r\n            kjafngslkearn ooiragflakloigm oirmjgl moir irmglm oiamligm imalgimia imalirg ialigm\r\n            </p>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default InitialText","class question {\r\n    constructor(question, answerType, answers, userAnswer) {\r\n        this.question = question\r\n        this.answerType = answerType\r\n        this.answers = answers\r\n        this.userAnswer = userAnswer\r\n    }\r\n}\r\n\r\nexport default question","import question from '../formDatas/formDatas'\r\nconst initialQ = [\r\n    new question(\"Ile masz lat?\", \"range\", ['']),\r\n    new question(\"Jakie jest Twoje BMI?\", \"range\", ['']),\r\n    new question(\"Jak długo się wspinasz?\", \"radio\", ['dopiero zaczynam', 'kilka miesięcy', '1-3 lat', '3-6 lat', 'dłużej niż 6 lat']),\r\n    new question(\"Jak trudne drogi / buldery robisz?\", \"radio\", ['do 5c', 'do 6b', 'do 7a', 'do 7c', 'trudniejsze niż 7c']),\r\n    new question(\"Czy masz/ miałeś/aś jakieś kontuzje?\", \"checkbox\", ['palców', 'barków', 'łokci', 'kolana', 'kręgosłup', 'inne'], [])\r\n]\r\nconst mediumQ = [\r\n    new question(\"Na jakim rodzaju wspinaczki najbardziej Ci zależy?\", \"radio\", ['sportowa', 'buldering', 'czasówki', 'olimpiada']),\r\n    new question(\"Gdzie będziesz się wspinać?\", \"checkbox\", ['panel', 'Polska', 'West'],[]),\r\n    new question(\"Czy uprawiasz jakieś inne sporty?\", \"checkbox\", ['nie', 'bieganie', 'kolarstwo', 'pływanie', 'sporty walki', 'gimnastyka', 'slackline', 'inne'], []),\r\n    new question(\"Jak często możesz trenować?\", \"radio\", ['raz w tygodniu', '2-3 razy w tygodniu', '5 razy w tygodniu', 'ile trzeba']),\r\n    new question(\"Wolisz trenować sam czy w grupie?\", \"radio\", ['sam', 'z kolegą/ koleżanką', 'w malej grupie', 'obojętne']),\r\n\r\n]\r\n\r\nconst endQ = [\r\n    new question(\"W czym czujesz, że jesteś najsłabszy (max 2)?\", \"checkbox\", ['balans', 'rozciągnięcie', 'dynamika', 'siła', 'wytrzymałość', 'technika','jestem dzikiem'],[]),\r\n    new question(\"Czy masz warunki do treningu w domu?\", \"radio\", ['nie chcę ćwiczyć w domu', 'coś się wymyśli', 'mam w domu pakernie']),\r\n    new question(\"Czy lubisz chodzić na siłownię?\", \"radio\", ['tak', 'nie', 'jak muszę']),\r\n    new question(\"Jakie wyposażenie ma ściana na którą chodzisz?\", \"checkbox\", ['bulderownia', 'drogi sportowe', 'campus', 'ciężary', 'chwytotablice', 'moonboard'],[]),\r\n    new question(\"Czy masz konkretny cel wspinaczkowy?\", \"radio\", ['konkretna droga / boulder', 'zawody', 'olimpiada', 'nie']),\r\n]\r\n\r\nlet qestionArray = []\r\nqestionArray = qestionArray.concat(initialQ, mediumQ, endQ)\r\nexport default qestionArray","import React from 'react'\r\nimport './ResultText.css';\r\nimport { Page, Text, View, Document, StyleSheet, PDFDownloadLink } from '@react-pdf/renderer';\r\nimport questionArray from '../ResultData/ResultData'\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    page: {\r\n      flexDirection: 'row',\r\n      backgroundColor: '#E4E4E4'\r\n    },\r\n    section: {\r\n      margin: 10,\r\n      padding: 10,\r\n      flexGrow: 1\r\n    }\r\n  });\r\n\r\nconst MyDoc = () => (\r\n    <Document>\r\n    <Page size=\"A4\" style={styles.page}>\r\n      <View style={styles.section}>\r\n        <Text>Section #1</Text>\r\n      </View>\r\n      <View style={styles.section}>\r\n        <Text>Section #2</Text>\r\n      </View>\r\n    </Page>\r\n  </Document>\r\n  )\r\n  \r\nfunction ResultText() {\r\n   return( <div>\r\n      <PDFDownloadLink document={<MyDoc />} fileName=\"somename.pdf\">\r\n        {({ blob, url, loading, error }) => (loading ? 'Loading document...' : 'Download now!')}\r\n      </PDFDownloadLink>\r\n    </div>\r\n  )}\r\n\r\nexport default ResultText","import React, {useState, useEffect} from 'react'\r\nimport styles from './InputComp.module.css';\r\n import questionArray from '../ResultData/ResultData'\r\nfunction InputComp  ({state, question, answerType, answers, index, pageNumber}){\r\n\r\n  const [inputData, setInput] = useState([\"initial\"])\r\n  const [warning, setWarning]= useState(styles.true)\r\n\r\n  const changeValue =(answer)=>{\r\nif(answerType != 'range'){\r\n\r\n     const targetElement = document.getElementById(answer)\r\n     if( targetElement.checked == false){\r\n      targetElement.checked = true\r\n       setWarning(styles.true)\r\n     }\r\n     else if(targetElement.checked == true){\r\n      targetElement.checked = false\r\n      setWarning(styles.false)\r\n     }\r\n      setInput(answer)\r\n}\r\n}\r\n\r\nconst changeValueRange =(e)=>{\r\n  setInput(e.target.value)\r\n  setWarning(styles.true)\r\n}\r\n\r\n useEffect(()=>{\r\n   const checkAnswer = questionArray[index].userAnswer\r\nr\n if((checkAnswer == undefined \r\n  || checkAnswer == '') \r\n  && state == false && inputData == 'initial' )\r\n {\r\nsetWarning(styles.false)\r\n }\r\n else{\r\n  setWarning(styles.true)\r\n\r\n  triggerAnswer()\r\n }\r\n\r\n }\r\n )\r\n\r\nconst triggerAnswer=()=>{\r\n  if(inputData != \"initial\"){\r\n    const targetElement = document.getElementById(inputData)\r\nif(answerType === 'checkbox'){\r\n    if(targetElement.checked == true){\r\n      questionArray[index].userAnswer.push(inputData)\r\n    }\r\nelse if(targetElement.checked == false){\r\n  let finding = questionArray[index].userAnswer.findIndex(el=>{\r\n    return el === inputData\r\n      })\r\n        questionArray[index].userAnswer.splice(finding,1)\r\n        setInput('initial')\r\n}\r\n}\r\nelse if(answerType === 'radio'){\r\n\r\n  targetElement.checked == true? questionArray[index].userAnswer = inputData \r\n  : (()=>{\r\n    questionArray[index].userAnswer = undefined \r\n    setInput('initial')})()\r\n  }\r\n\r\nelse {\r\n    questionArray[index].userAnswer = inputData\r\n}\r\n  }\r\n}\r\n\r\n\r\nconst answerChecked=(answer)=>{\r\n  if( inputData == \"initial\"){\r\n\r\n  if(answerType == \"radio\"){\r\n  if(answer == questionArray[index].userAnswer ){\r\n\r\n    return true}\r\n  }\r\n  if(answerType == \"checkbox\"){\r\n      let ans \r\n\r\n\r\n      questionArray[index].userAnswer.map((userAns)=>\r\n      {\r\n\r\n        if(answer == userAns){\r\n          ans = true\r\n        }\r\n      })\r\n      return ans\r\n    }\r\n  }\r\n  }\r\n  const numberChecked = ()=>{\r\n    if(inputData == \"initial\"){\r\n      return questionArray[index].userAnswer\r\n    }\r\n    else{\r\n      return inputData\r\n    }\r\n  }\r\n\r\n    return (\r\n        <div className={styles.InputComp}>{ \r\n          <form key ={index+question} className ={question}>\r\n        <label className={warning}>{question}</label>\r\n             { answers.map( (answer) =>\r\n                <div  className={styles.InputAnswer} key={index +answerType +answer} \r\n                onClick={()=>changeValue(answer)}\r\n                >\r\n                <div>\r\n                \r\n               {(function(){\r\n            \r\n                if(answerType=== 'range')\r\n                {\r\n                  return (<div><input name={question} \r\n                  type={answerType} \r\n                  key={answer}\r\n              value ={numberChecked()}\r\n                  onChange={changeValueRange}\r\n                  min=\"5\" max=\"80\"\r\n                 />\r\n                  {inputData!='initial'? inputData :questionArray[index].userAnswer}</div>)\r\n                }\r\n\r\n                else\r\n                {\r\n                  return (<input  name={question} \r\n                type={answerType} \r\n                id={answer}\r\n                key={answer}\r\n                value={answer}\r\n                checked ={answerChecked(answer)}\r\n                disabled       \r\n              />)\r\n                }\r\n               })() }\r\n                \r\n                </div>\r\n                <label>{ answer}</label>\r\n                </div>\r\n              )}\r\n              </form>\r\n            }\r\n        </div>\r\n        )\r\n             }\r\n    \r\nexport default InputComp","import React from 'react'\r\nimport style from './List.module.css';\r\nimport InputComp from '../InputComp/InputComp';\r\nimport questionArray from '../ResultData/ResultData'\r\n\r\nfunction List({page, state, pageNumber}) {\r\n    console.log(pageNumber * page)\r\n\r\n    const generatingList = (e)=>{\r\n        const elementsOnPage = questionArray.length/pageNumber\r\n       console.log(elementsOnPage)\r\nif(e<elementsOnPage*page && e>= elementsOnPage*(page-1) )\r\n{\r\n    return true\r\n}\r\nelse {\r\n    return false\r\n}\r\n\r\n    }\r\n    return (\r\n        <div className={style.List} key ={\"List\" + page}>\r\n\r\n            {\r\n                questionArray.map((currentValue, index) => generatingList(index)? <InputComp\r\n                state = {state}\r\n                key={index}\r\n                question={currentValue.question}\r\n                answerType={currentValue.answerType}\r\n                answers={currentValue.answers}\r\n                index={index}\r\n                pageNumber={page}\r\n                />\r\n                :null\r\n                )\r\n         \r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List\r\n","import React, {useState, useEffect} from 'react'\r\nimport './Button.css';\r\nimport questionArray from '../ResultData/ResultData'\r\n\r\nfunction Button({\r\n    descr = 'Start',\r\n    count = 0,\r\n    state = false\r\n}) {\r\n//    const [state, setState] =useState(false)\r\n   const [checking, setCheck] =useState(0) \r\n\r\n\r\n// function checkValid(){\r\n//     let test\r\n//     if(descr =='Dalej'){\r\n//    questionArray.map((question, index)=>{\r\n       \r\n//        if(index< 5*count && (question.userAnswer == undefined || question.userAnswer == '' )){\r\n//            setState(true)\r\n//            console.log('teeeeeeeeeeeeees'+count+index + descr+test)\r\n//        }\r\n//        else if(index< 5*count && (question.userAnswer != undefined && question.userAnswer != '' )){\r\n//            setState(false)\r\n//            console.log('ts'+count+index)\r\n//        }\r\n\r\n//    })\r\n// }\r\n// }\r\n    return (\r\n        <button className={`${state}`} >{descr}</button>\r\n\r\n    )\r\n}\r\n\r\nexport default Button","import React from 'react'\r\nimport './Footer.module.css';\r\n\r\nfunction Footer(){\r\n    return (\r\n        <footer>\r\n        <p>\r\n        Generator treningowy\r\n        </p>\r\n\r\n        </footer>\r\n    \r\n    )\r\n}\r\n\r\nexport default Footer","import React, {useState, useEffect, useRef} from 'react';\nimport './App.css';\nimport Header from '../Header/Header'\nimport InitialText from '../InitialText/InitialText'\nimport ResultText from '../ResultText/ResultText'\nimport List from '../List/List'\nimport Button from '../Button/Button'\nimport Footer from '../Footer/Footer'\nimport questionArray from '../ResultData/ResultData'\n//LICZNIK STRON \nfunction App() {\n    const [count,\n        setCount] = useState(0)\n    const [page,\n        setPage] = useState('initial');\n    const [state,\n        setState] = useState(true)\n        const [pageNumber,\n            setPageNumber] = useState(3)\n    \n const ref = useRef(null);\n //POCZYTAC O TYM\n\n    useEffect(() => {\n        const width = ref.current ? ref.current.offsetWidth : 0;\n        console.log('width', width);\nconst elementsOnPage = Math.ceil(width/200)-3\nlet pageNum\n\n        if (count === 0) {\n            setPage('initial')\n            pageNum = Math.floor(questionArray.length/elementsOnPage)\n            setPageNumber(pageNum)\n           \n            console.log(pageNumber)\n        } else if (count >= 1 && count <= pageNumber) {\n            setPage('list')\n        } else if (count === pageNumber+1) {\n            setPage('result')\n        } else if (count > pageNumber+1) {\n            setCount(1)\n            setPage('list')\n        }\n        console.log(pageNumber)\n    }, [count, ref.current])\n\n    \n    function buttonAction(type) {\n        let actualState = true\n        let answersNumber = 0\n        const elementsOnPage = questionArray.length/pageNumber\n        console.log(page + count)\n        if (page == 'list') {\n            console.log(\"popop\" + actualState)\n            questionArray.map((question, index) => {\n\n                if (index < elementsOnPage * count && (question.userAnswer == undefined || question.userAnswer == '')) {\n                    actualState = false\n                    setState(actualState)\n                    console.log(\"totu\" + index + count)\n                } else if (index < elementsOnPage * count && (question.userAnswer != undefined && question.userAnswer != '')) {\n                    answersNumber++\n                }\n\n            })\n            if (answersNumber == elementsOnPage * count) {\n                actualState = true\n                setState(actualState)\n            }\n            if (actualState == true && type == 'next') {\n                console.log(actualState)\n                setCount(count + 1)\n            } else if (type == 'prev') {\n                setCount(count - 1)\n                actualState = true\n                setState(actualState)\n            }\n            console.log(\"popop\" + actualState)\n        } else {\n            if (type == 'next') {\n                setCount(count + 1)\n            }\n\n        }\n\n    }\n\n    return (\n        <div className=\"App\" ref={ref}>\n\n            <Header/>\n            <span id=\"before\"/>\n            <div id=\"main\">\n                {(() => {\n                    switch (page) {\n                        case 'initial':\n                            return <div key={page} id={page}><InitialText/>\n                                <div\n                                    onClick={() => {\n                                    buttonAction('next')\n                                }}>\n                                    <Button value={count} text ={'Start'}/>\n                                </div>\n                            </div>;\n                        case 'list':\n                            return <div key={page} id={page}>\n\n                                <List page ={count} state={state} pageNumber={pageNumber} />\n                                <div>\n                                    <div\n                                        onClick={() => {\n                                        buttonAction('prev')\n                                    }}>\n                                        <Button value={count} descr ={'Wróć'}/>\n                                    </div>\n                                    <div\n                                        onClick={() => {\n                                        buttonAction('next')\n                                    }}>\n                                        <Button value={count} descr ={'Dalej'} count={count} state={state}/></div>\n                                </div>\n                            </div>;\n                        case 'result':\n                            return <div key={page} id={page}><ResultText/>\n                                <div\n                                    onClick={() => {\n                                    buttonAction('next')\n                                }}>\n                                    <Button value={count} descr ={'Powtórz'}/>\n                                </div>\n                            </div>;\n                        default:\n                            return <div key=\"initial\" id=\"initial\"><InitialText/>\n                                <div\n                                    onClick={() => {\n                                    buttonAction('next')\n                                }}>\n                                    <Button value={count} descr ={'Start'}/>\n                                </div>\n                            </div>;\n                    }\n                })()}</div>\n            <span id=\"after\"/>\n            <Footer/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif (module.hot) {\n    module.hot.accept()\n    }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"false\":\"InputComp_false__2jh6z\",\"true\":\"InputComp_true__1IqYm\",\"InputComp\":\"InputComp_InputComp__KEnBP\",\"noInputComp\":\"InputComp_noInputComp__2w7sC\",\"InputAnswer\":\"InputComp_InputAnswer__dFHGi\"};"],"sourceRoot":""}